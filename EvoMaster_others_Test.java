import  org.junit.jupiter.api.AfterAll;
import  org.junit.jupiter.api.BeforeAll;
import  org.junit.jupiter.api.BeforeEach;
import  org.junit.jupiter.api.Test;
import  org.junit.jupiter.api.Timeout;
import static org.junit.jupiter.api.Assertions.*;
import  java.util.Map;
import  java.util.List;
import static org.evomaster.client.java.controller.api.EMTestUtils.*;
import  org.evomaster.client.java.controller.SutHandler;
import  io.restassured.RestAssured;
import static io.restassured.RestAssured.given;
import  io.restassured.response.ValidatableResponse;
import static org.hamcrest.Matchers.*;
import  io.restassured.config.JsonConfig;
import  io.restassured.path.json.config.JsonPathConfig;
import static io.restassured.config.RedirectConfig.redirectConfig;
import static org.evomaster.client.java.controller.contentMatchers.NumberMatcher.*;
import static org.evomaster.client.java.controller.contentMatchers.StringMatcher.*;
import static org.evomaster.client.java.controller.contentMatchers.SubStringMatcher.*;
import static org.evomaster.client.java.controller.expect.ExpectationHandler.expectationHandler;
import  org.evomaster.client.java.controller.expect.ExpectationHandler;
import  io.restassured.path.json.JsonPath;
import  java.util.Arrays;




/**
 * This file was automatically generated by EvoMaster on 2023-03-06T10:01:22.344643Z[GMT]
 * <br>
 * The generated test suite contains 3 tests
 * <br>
 * Covered targets: 14
 * <br>
 * Used time: 0h 5m 0s
 * <br>
 * Needed budget for current results: 100%
 * <br>
 * This file contains test cases that represent failed calls, but not indicative of faults.
 */
public class EvoMaster_others_Test {

    
    private static String baseUrlOfSut = "https://restlerdemoserver.pagekite.me";
    /** [ems] - expectations master switch - is the variable that activates/deactivates expectations individual test cases
    * by default, expectations are turned off. The variable needs to be set to [true] to enable expectations
    */
    private static boolean ems = false;
    /**
    * sco - supported code oracle - checking that the response status code is among those supported according to the schema
    */
    private static boolean sco = false;
    /**
    * rso - response structure oracle - checking that the response objects match the responses defined in the schema
    */
    private static boolean rso = false;
    
    
    @BeforeAll
    public static void initClass() {
        RestAssured.enableLoggingOfRequestAndResponseIfValidationFails();
        RestAssured.useRelaxedHTTPSValidation();
        RestAssured.urlEncodingEnabled = false;
        RestAssured.config = RestAssured.config()
            .jsonConfig(JsonConfig.jsonConfig().numberReturnType(JsonPathConfig.NumberReturnType.DOUBLE))
            .redirect(redirectConfig().followRedirects(false));
    }
    
    
    
    
    
    
    
    
    @Test @Timeout(60)
    public void test_0() throws Exception {
        ExpectationHandler expectationHandler = expectationHandler();
        
        try{
            given().accept("*/*")
                    .contentType("application/json")
                    .body(" { " + 
                        " \"id\": 772, " + 
                        " \"body\": \"kjaNAGaUJ1tJG\" " + 
                        " } ")
                    .post(baseUrlOfSut + "/api/blog/posts");
        } catch(Exception e){
        }
    }
    
    
    @Test @Timeout(60)
    public void test_1() throws Exception {
        ExpectationHandler expectationHandler = expectationHandler();
        
        try{
            given().accept("*/*")
                    .get(baseUrlOfSut + "/api/blog/posts/93");
        } catch(Exception e){
        }
    }
    
    
    @Test @Timeout(60)
    public void test_2() throws Exception {
        ExpectationHandler expectationHandler = expectationHandler();
        
        given().accept("*/*")
                .delete(baseUrlOfSut + "/api/blog/posts/642")
                .then()
                .statusCode(204)
                .assertThat()
                .body(isEmptyOrNullString());
        
        
        given().accept("*/*")
                .delete(baseUrlOfSut + "/api/blog/posts/679")
                .then()
                .statusCode(204)
                .assertThat()
                .body(isEmptyOrNullString());
        
        
        ValidatableResponse res_2 = given().accept("application/json")
                .get(baseUrlOfSut + "/api/doc")
                .then()
                .statusCode(200)
                .assertThat()
                .contentType("application/json")
                .body("'message'", containsString("this is the docs"));
        
        expectationHandler.expect(ems);
        
        ValidatableResponse res_3 = given().accept("application/json")
                .contentType("application/json")
                .body(" { " + 
                    " \"id\": -1774035816, " + 
                    " \"body\": \"Rq\" " + 
                    " } ")
                .put(baseUrlOfSut + "/api/blog/posts/-1774035816")
                .then()
                .statusCode(404)
                .assertThat()
                .contentType("application/json")
                .body("'detail'", containsString("Blog post with id=-1774035816 not found."));
        
        expectationHandler.expect(ems)
            .that(sco, Arrays.asList(204, 422).contains(res_3.extract().statusCode()));
        
        given().accept("*/*")
                .delete(baseUrlOfSut + "/api/blog/posts/521")
                .then()
                .statusCode(204)
                .assertThat()
                .body(isEmptyOrNullString());
        
        
        given().accept("*/*")
                .delete(baseUrlOfSut + "/api/blog/posts/720")
                .then()
                .statusCode(204)
                .assertThat()
                .body(isEmptyOrNullString());
        
        
        given().accept("*/*")
                .delete(baseUrlOfSut + "/api/blog/posts/272")
                .then()
                .statusCode(204)
                .assertThat()
                .body(isEmptyOrNullString());
        
        
        given().accept("application/json")
                .get(baseUrlOfSut + "/api/blog/posts?" + 
                    "page=40&" + 
                    "per_page=764")
                .then()
                .statusCode(200)
                .assertThat()
                .contentType("application/json")
                .body("'items'.size()", equalTo(764))
                .body("'items'[0].'body'", containsString("c4@N8B/L"))
                .body("'items'[0].'checksum'", containsString("e1ccc"))
                .body("'items'[1].'body'", containsString("O14n2y8gP"))
                .body("'items'[1].'checksum'", containsString("e77c7"))
                .body("'items'[2].'body'", containsString(":[,f758PL"))
                .body("'items'[2].'checksum'", containsString("9c202"))
                // Skipping assertions on the remaining 761 elements. This limit of 3 elements can be increased in the configurations
                .body("'per_page'", numberMatches(764.0))
                .body("'page'", numberMatches(40.0))
                .body("'total'", numberMatches(764.0));
        
    }


}
